// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppDomainClient is the client API for AppDomain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppDomainClient interface {
	Echo(ctx context.Context, in *AppDomainRequest, opts ...grpc.CallOption) (*AppDomainResponse, error)
}

type appDomainClient struct {
	cc grpc.ClientConnInterface
}

func NewAppDomainClient(cc grpc.ClientConnInterface) AppDomainClient {
	return &appDomainClient{cc}
}

func (c *appDomainClient) Echo(ctx context.Context, in *AppDomainRequest, opts ...grpc.CallOption) (*AppDomainResponse, error) {
	out := new(AppDomainResponse)
	err := c.cc.Invoke(ctx, "/api.eng.v1.AppDomain/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppDomainServer is the server API for AppDomain service.
// All implementations must embed UnimplementedAppDomainServer
// for forward compatibility
type AppDomainServer interface {
	Echo(context.Context, *AppDomainRequest) (*AppDomainResponse, error)
	mustEmbedUnimplementedAppDomainServer()
}

// UnimplementedAppDomainServer must be embedded to have forward compatible implementations.
type UnimplementedAppDomainServer struct {
}

func (UnimplementedAppDomainServer) Echo(context.Context, *AppDomainRequest) (*AppDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedAppDomainServer) mustEmbedUnimplementedAppDomainServer() {}

// UnsafeAppDomainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppDomainServer will
// result in compilation errors.
type UnsafeAppDomainServer interface {
	mustEmbedUnimplementedAppDomainServer()
}

func RegisterAppDomainServer(s grpc.ServiceRegistrar, srv AppDomainServer) {
	s.RegisterService(&AppDomain_ServiceDesc, srv)
}

func _AppDomain_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppDomainServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.eng.v1.AppDomain/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppDomainServer).Echo(ctx, req.(*AppDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppDomain_ServiceDesc is the grpc.ServiceDesc for AppDomain service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppDomain_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.eng.v1.AppDomain",
	HandlerType: (*AppDomainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _AppDomain_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/eng/v1/api.proto",
}
